from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta
import os
import json
from docx.shared import Inches, Pt, RGBColor
import pdfkit
from io import BytesIO
import uuid
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
import csv
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.shared import qn

from docx.enum.table import WD_TABLE_ALIGNMENT
import tempfile
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.config['SECRET_KEY'] = 'olympiad-system-secret-key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///olympiad.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/pdf_files'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload

if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

import json


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now()


@app.template_filter('fromjson')
def fromjson(value):
    return json.loads(value)


# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
@app.template_filter('tojson')
def to_json(value):
    return json.dumps(value)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —à–∞–±–ª–æ–Ω
def prepare_question_data(questions):
    for q in questions:
        if q.question_type == 'test' and q.options:
            q.options_list = json.loads(q.options)
            if q.correct_answers:
                q.correct_answers_list = json.loads(q.correct_answers)
            else:
                q.correct_answers_list = []
        elif q.question_type == 'matching' and q.matches:
            q.matches_list = json.loads(q.matches)
        else:
            q.options_list = []
            q.matches_list = []
            q.correct_answers_list = []
    return questions


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
def calculate_time_bonus(actual_time, max_time, base_points):
    """
    –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞

    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –±—ã—Å—Ç—Ä–µ–µ 25% –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (20% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤)
    - –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞ 25-50% –≤—Ä–µ–º–µ–Ω–∏ - —Ö–æ—Ä–æ—à–∏–π –±–æ–Ω—É—Å (10% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤)
    - –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞ 50-75% –≤—Ä–µ–º–µ–Ω–∏ - –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å (5% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤)
    - –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞ 75-100% –≤—Ä–µ–º–µ–Ω–∏ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (1% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤)
    - –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è - –Ω–µ—Ç –±–æ–Ω—É—Å–∞
    """

    if actual_time <= 0 or max_time <= 0 or base_points <= 0:
        return 0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    time_percentage = (actual_time / max_time) * 100

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if time_percentage <= 25:
        bonus_percentage = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    elif time_percentage <= 50:
        bonus_percentage = 10  # –•–æ—Ä–æ—à–∏–π –±–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    elif time_percentage <= 75:
        bonus_percentage = 5  # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    elif time_percentage <= 100:
        bonus_percentage = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Å—Ä–æ–∫
    else:
        bonus_percentage = 0  # –ù–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å
    time_bonus = (base_points * bonus_percentage) / 100

    return round(time_bonus, 2)


def get_time_performance_category(actual_time, max_time):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    if actual_time <= 0 or max_time <= 0:
        return "unknown", "–í—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

    time_percentage = (actual_time / max_time) * 100

    if time_percentage <= 25:
        return "excellent", "‚ö° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ"
    elif time_percentage <= 50:
        return "very_good", "üöÄ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ"
    elif time_percentage <= 75:
        return "good", "‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ"
    elif time_percentage <= 100:
        return "normal", "‚úÖ –í —Å—Ä–æ–∫"
    else:
        return "overtime", "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
@app.context_processor
def inject_time_functions():
    return dict(
        get_time_performance_category=get_time_performance_category,
        min=min,
        max=max
    )


def calculate_final_score(participation):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ = –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    """
    if not participation.start_time or not participation.finish_time:
        participation.final_score = participation.total_points
        participation.duration_seconds = None
        participation.time_bonus = 0
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    olympiad = Olympiad.query.get(participation.olympiad_id)
    if not olympiad:
        participation.final_score = participation.total_points
        participation.time_bonus = 0
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    duration = participation.finish_time - participation.start_time
    participation.duration_seconds = duration.total_seconds()

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ª–∏–º–ø–∏–∞–¥—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    max_duration = (olympiad.end_time - olympiad.start_time).total_seconds()

    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    time_bonus = calculate_time_bonus(participation.duration_seconds, max_duration, participation.total_points)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    participation.time_bonus = time_bonus

    # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª = –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã + –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å
    participation.final_score = participation.total_points + time_bonus


def update_all_final_scores(olympiad_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ª–∏–º–ø–∏–∞–¥—ã
    """
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).all()

    for participation in participations:
        calculate_final_score(participation)

    db.session.commit()


def recalculate_all_time_scores():
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∏–π
    """
    completed_participations = Participation.query.filter_by(status='completed').all()

    for participation in completed_participations:
        if participation.start_time and participation.finish_time:
            calculate_final_score(participation)

    db.session.commit()
    return len(completed_participations)


# Models
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    full_name = db.Column(db.String(100), nullable=False)
    study_group = db.Column(db.String(50), nullable=True)
    speciality = db.Column(db.Text, nullable=True)  # JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    is_admin = db.Column(db.Boolean, default=False)
    participations = db.relationship('Participation', backref='user', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def get_speciality_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.speciality:
            try:
                return json.loads(self.speciality)
            except:
                return None
        return None


class Olympiad(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    start_time = db.Column(db.DateTime, nullable=False)
    end_time = db.Column(db.DateTime, nullable=False)
    welcome_pdf = db.Column(db.String(200), nullable=True)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    blocks = db.relationship('Block', backref='olympiad', lazy=True, cascade="all, delete-orphan")
    participations = db.relationship('Participation', backref='olympiad', lazy=True, cascade="all, delete-orphan")


class Block(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    olympiad_id = db.Column(db.Integer, db.ForeignKey('olympiad.id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=True)
    max_points = db.Column(db.Float, nullable=False)
    threshold_percentage = db.Column(db.Float, nullable=False)  # % –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    order = db.Column(db.Integer, nullable=False)
    questions = db.relationship('Question', backref='block', lazy=True, cascade="all, delete-orphan")


class BlockResult(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    participation_id = db.Column(db.Integer, db.ForeignKey('participation.id'), nullable=False)
    block_id = db.Column(db.Integer, db.ForeignKey('block.id'), nullable=False)
    points_earned = db.Column(db.Float, default=0)
    completed_at = db.Column(db.DateTime, default=get_current_time)

    participation = db.relationship('Participation', backref='block_results')
    block = db.relationship('Block', backref='results')


class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    block_id = db.Column(db.Integer, db.ForeignKey('block.id'), nullable=False)
    question_type = db.Column(db.String(20), nullable=False)  # 'test' –∏–ª–∏ 'matching'
    text = db.Column(db.Text, nullable=False)
    options = db.Column(db.Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    correct_answers = db.Column(db.Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    matches = db.Column(db.Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    points = db.Column(db.Float, nullable=False)
    answers = db.relationship('Answer', backref='question', lazy=True, cascade="all, delete-orphan")


class Participation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    olympiad_id = db.Column(db.Integer, db.ForeignKey('olympiad.id'), nullable=False)
    start_time = db.Column(db.DateTime, nullable=True)
    finish_time = db.Column(db.DateTime, nullable=True)
    total_points = db.Column(db.Float, default=0)  # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    final_score = db.Column(db.Float, default=0)  # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    duration_seconds = db.Column(db.Float, nullable=True)  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    time_bonus = db.Column(db.Float, default=0)  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    status = db.Column(db.String(20), default='registered')  # 'registered', 'in_progress', 'completed'
    current_block = db.Column(db.Integer, nullable=True)
    answers = db.relationship('Answer', backref='participation', lazy=True, cascade="all, delete-orphan")


class Answer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    participation_id = db.Column(db.Integer, db.ForeignKey('participation.id'), nullable=False)
    question_id = db.Column(db.Integer, db.ForeignKey('question.id'), nullable=False)
    answer_data = db.Column(db.Text, nullable=False)  # JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    is_correct = db.Column(db.Boolean, default=False)
    points_earned = db.Column(db.Float, default=0)
    answered_at = db.Column(db.DateTime, default=get_current_time)


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


@app.context_processor  # runs for every template render
def inject_now():
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ UTC
    return {'now': get_current_time}


# Routes
@app.route('/')
def index():
    if current_user.is_authenticated:
        if current_user.is_admin:
            olympiads = Olympiad.query.all()
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            current_time = get_current_time()
            olympiads = Olympiad.query.filter(
                Olympiad.end_time > current_time
            ).all()
    else:
        olympiads = []
    return render_template('index.html', olympiads=olympiads)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')

        user = User.query.filter_by(email=email).first()
        if user and user.check_password(password):
            login_user(user)
            next_page = request.args.get('next')
            return redirect(next_page or url_for('index'))
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('login.html')


@app.route('/api/specialities', methods=['GET'])
def get_specialities():
    """API —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π"""
    try:
        response = requests.get('https://melsu.ru/api/specialities/list', timeout=10)
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π'}), 500
    except requests.RequestException:
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'}), 500


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        full_name = request.form.get('full_name')
        study_group = request.form.get('study_group')
        speciality_id = request.form.get('speciality_id')

        if User.query.filter_by(email=email).first():
            flash('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'error')
            return redirect(url_for('register'))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        speciality_info = None
        if speciality_id:
            try:
                response = requests.get('https://melsu.ru/api/specialities/list', timeout=10)
                if response.status_code == 200:
                    specialities = response.json()
                    if speciality_id in specialities:
                        spec = specialities[speciality_id]
                        speciality_info = {
                            'id': spec['id'],
                            'spec_code': spec['spec_code'],
                            'name': spec['name'],
                            'department_name': spec['department_name'],
                            'faculty_name': spec['faculty_name'],
                            'faculty_acronym': spec['faculty_acronym'],
                            'level': spec['level']
                        }
            except requests.RequestException:
                flash('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', 'warning')

        user = User(
            email=email,
            full_name=full_name,
            study_group=study_group,
            speciality=json.dumps(speciality_info) if speciality_info else None
        )
        user.set_password(password)

        db.session.add(user)
        db.session.commit()

        login_user(user)
        return redirect(url_for('index'))

    return render_template('register.html')


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


@app.route('/profile')
@login_required
def profile():
    participations = Participation.query.filter_by(user_id=current_user.id).all()
    return render_template('profile.html', participations=participations)


# Admin routes
@app.route('/admin/olympiads', methods=['GET'])
@login_required
def admin_olympiads():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiads = Olympiad.query.all()
    return render_template('admin/olympiads.html', olympiads=olympiads)


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@app.route('/admin/users', methods=['GET'])
@login_required
def admin_users():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    users = User.query.all()
    return render_template('admin/users.html', users=users)


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@app.route('/admin/analytics', methods=['GET'])
@login_required
def admin_analytics():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_olympiads = Olympiad.query.count()
    total_users = User.query.count()
    total_participations = Participation.query.count()
    completed_participations = Participation.query.filter_by(status='completed').count()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–∞–º
    current_time = get_current_time()
    active_olympiads = Olympiad.query.filter(
        Olympiad.start_time <= current_time,
        Olympiad.end_time > current_time
    ).count()

    upcoming_olympiads = Olympiad.query.filter(
        Olympiad.start_time > current_time
    ).count()

    # –¢–æ–ø –æ–ª–∏–º–ø–∏–∞–¥ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    olympiad_stats = db.session.query(
        Olympiad.title,
        db.func.count(Participation.id).label('participants')
    ).join(Participation).group_by(Olympiad.id).order_by(
        db.func.count(Participation.id).desc()
    ).limit(10).all()

    return render_template('admin/analytics.html',
                           total_olympiads=total_olympiads,
                           total_users=total_users,
                           total_participations=total_participations,
                           completed_participations=completed_participations,
                           active_olympiads=active_olympiads,
                           upcoming_olympiads=upcoming_olympiads,
                           olympiad_stats=olympiad_stats)


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
@app.route('/admin/settings', methods=['GET'])
@login_required
def admin_settings():
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    return render_template('admin/settings.html')


# –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
@app.route('/admin/recalculate_time_scores', methods=['POST'])
@login_required
def recalculate_time_scores():
    """–†—É—á–Ω–æ–π –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    try:
        count = recalculate_all_time_scores()
        return jsonify({
            'success': True,
            'message': f'–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è {count} —É—á–∞—Å—Ç–∏–π'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ: {str(e)}'
        }), 500


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
from docx.oxml import OxmlElement
from docx.oxml.ns import qn


@app.route('/admin/olympiad/<int:olympiad_id>/export_docx', methods=['GET'])
@login_required
def export_rankings_docx(olympiad_id):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ú–µ–ª–ì–£"""
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(14)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    header1 = doc.add_paragraph()
    header1.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run1 = header1.add_run('–§–ï–î–ï–†–ê–õ–¨–ù–û–ï –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–û–ï –ë–Æ–î–ñ–ï–¢–ù–û–ï –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–û–ï –£–ß–†–ï–ñ–î–ï–ù–ò–ï –í–´–°–®–ï–ì–û –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø')
    run1.font.name = 'Times New Roman'
    run1.font.size = Pt(14)
    run1.font.bold = True

    header2 = doc.add_paragraph()
    header2.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run2 = header2.add_run('–ú–ï–õ–ò–¢–û–ü–û–õ–¨–°–ö–ò–ô –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢')
    run2.font.name = 'Times New Roman'
    run2.font.size = Pt(14)
    run2.font.bold = True

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    doc.add_paragraph()

    # –§–∞–∫—É–ª—å—Ç–µ—Ç –∏ –∫–∞—Ñ–µ–¥—Ä–∞
    faculty = doc.add_paragraph()
    faculty.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run3 = faculty.add_run('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç')
    run3.font.name = 'Times New Roman'
    run3.font.size = Pt(14)
    run3.font.bold = True

    department = doc.add_paragraph()
    department.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run4 = department.add_run('–∫–∞—Ñ–µ–¥—Ä–∞ ¬´–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å¬ª')
    run4.font.name = 'Times New Roman'
    run4.font.size = Pt(14)
    run4.font.bold = True

    # 5 –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    for _ in range(5):
        doc.add_paragraph()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_title = doc.add_paragraph()
    results_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run5 = results_title.add_run('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô')
    run5.font.name = 'Times New Roman'
    run5.font.size = Pt(14)
    run5.font.bold = True

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    doc.add_paragraph()

    # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã
    olympiad_title = doc.add_paragraph()
    olympiad_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run6 = olympiad_title.add_run('–ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –û–ª–∏–º–ø–∏–∞–¥—ã')
    run6.font.name = 'Times New Roman'
    run6.font.size = Pt(14)
    run6.font.bold = True

    discipline1 = doc.add_paragraph()
    discipline1.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run7 = discipline1.add_run('–ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ')
    run7.font.name = 'Times New Roman'
    run7.font.size = Pt(14)
    run7.font.bold = True

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    discipline2 = doc.add_paragraph()
    discipline2.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run8 = discipline2.add_run(f'¬´{olympiad.title}¬ª')
    run8.font.name = 'Times New Roman'
    run8.font.size = Pt(14)
    run8.font.bold = True

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    doc.add_paragraph()

    # –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    date_conducted = doc.add_paragraph()
    date_conducted.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run9 = date_conducted.add_run(
        f'–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–π ¬´{olympiad.start_time.day}¬ª {_get_month_name(olympiad.start_time.month)} {olympiad.start_time.year} –≥.')
    run9.font.name = 'Times New Roman'
    run9.font.size = Pt(14)
    run9.font.bold = True

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    doc.add_paragraph()

    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 10)
    top_participants = participations[:3] if len(participations) > 3 else participations

    if top_participants:
        table = doc.add_table(rows=1, cols=7)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 7 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        table.alignment = WD_TABLE_ALIGNMENT.CENTER
        table.style = 'Table Grid'

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        headers = ['–ú–µ—Å—Ç–æ', '–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞', '–ì—Ä—É–ø–ø–∞', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
                   '–ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è', '–í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å', '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª']

        for i, header in enumerate(headers):
            hdr_cells[i].text = header
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            for paragraph in hdr_cells[i].paragraphs:
                for run in paragraph.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(14)
                    run.font.bold = True
                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for i, participation in enumerate(top_participants, 1):
            user = User.query.get(participation.user_id)
            row_cells = table.add_row().cells

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            speciality_info = user.get_speciality_info()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            if speciality_info:
                speciality_text = f"{speciality_info['spec_code']} - {speciality_info['name']}"
            else:
                speciality_text = '-'

            # –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = [
                str(i),
                user.full_name,
                user.study_group or '-',
                speciality_text,
                f"{participation.total_points:.1f}",  # –ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è
                f"+{participation.time_bonus:.1f}" if participation.time_bonus else "+0.0",  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å
                f"{participation.final_score:.1f}"  # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            ]

            for j, data in enumerate(row_data):
                row_cells[j].text = data
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
                for paragraph in row_cells[j].paragraphs:
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(14)
                    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –∏ –±–∞–ª–ª–æ–≤, –ª–µ–≤–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    if j in [0, 4, 5, 6]:  # –ú–µ—Å—Ç–æ –∏ –±–∞–ª–ª—ã
                        paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    else:  # –§–ò–û, –≥—Ä—É–ø–ø–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for i, width in enumerate(
                [Inches(0.6), Inches(2.2), Inches(1.0), Inches(2.5), Inches(1.0), Inches(1.0), Inches(1.0)]):
            for row in table.rows:
                row.cells[i].width = width

    # 4 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    for _ in range(4):
        doc.add_paragraph()

    # –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
    signature_date = doc.add_paragraph()
    signature_date.alignment = WD_ALIGN_PARAGRAPH.LEFT
    run10 = signature_date.add_run(f'¬´___¬ª____________ {datetime.now().year} –≥.')
    run10.font.name = 'Times New Roman'
    run10.font.size = Pt(14)

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    doc.add_paragraph()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –∂—é—Ä–∏
    jury_title = doc.add_paragraph()
    jury_title.alignment = WD_ALIGN_PARAGRAPH.LEFT
    run11 = jury_title.add_run('–ß–ª–µ–Ω—ã –∂—é—Ä–∏:')
    run11.font.name = 'Times New Roman'
    run11.font.size = Pt(14)
    run11.font.bold = True

    doc.add_paragraph()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π (3 —Å—Ç—Ä–æ–∫–∏ –ø–æ 4 —Å—Ç–æ–ª–±—Ü–∞: –ø—É—Å—Ç–æ–π, –ø–æ–¥–ø–∏—Å—å, –ø—É—Å—Ç–æ–π, –§–ò–û)
    jury_table = doc.add_table(rows=3, cols=4)
    jury_table.style = None  # –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    for i, width in enumerate([Inches(1), Inches(1.5), Inches(1), Inches(3.5)]):
        for row in jury_table.rows:
            row.cells[i].width = width

    jury_signatures = [
        ['', '(–ø–æ–¥–ø–∏—Å—å)', '', '(–∏–Ω–∏—Ü–∏–∞–ª—ã, —Ñ–∞–º–∏–ª–∏—è —É—á. —Å—Ç–µ–ø–µ–Ω—å, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)'],
        ['', '(–ø–æ–¥–ø–∏—Å—å)', '', '(–∏–Ω–∏—Ü–∏–∞–ª—ã, —Ñ–∞–º–∏–ª–∏—è —É—á. —Å—Ç–µ–ø–µ–Ω—å, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)'],
        ['', '(–ø–æ–¥–ø–∏—Å—å)', '', '(–∏–Ω–∏—Ü–∏–∞–ª—ã, —Ñ–∞–º–∏–ª–∏—è —É—á. —Å—Ç–µ–ø–µ–Ω—å, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)']
    ]

    for row_idx, row_data in enumerate(jury_signatures):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
        for _ in range(3):
            doc.add_paragraph()

        row = jury_table.rows[row_idx]

        for col_idx, cell_text in enumerate(row_data):
            cell = row.cells[col_idx]

            if cell_text:  # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è (—Å—Ç–æ–ª–±—Ü—ã 1 –∏ 3 - –ø–æ–¥–ø–∏—Å—å –∏ –§–ò–û)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                cell.text = cell_text

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(14)
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (–≥—Ä–∞–Ω–∏—Ü—É)
                tc = cell._tc
                tcPr = tc.get_or_add_tcPr()
                tcBorders = OxmlElement('w:tcBorders')
                top_border = OxmlElement('w:top')
                top_border.set(qn('w:val'), 'single')
                top_border.set(qn('w:sz'), '4')
                top_border.set(qn('w:space'), '0')
                top_border.set(qn('w:color'), '000000')
                tcBorders.append(top_border)
                tcPr.append(tcBorders)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç—å
    doc_io = BytesIO()
    doc.save(doc_io)
    doc_io.seek(0)

    filename = f'results_{olympiad.title}_{datetime.now().strftime("%Y%m%d_%H%M")}.docx'

    return send_file(
        doc_io,
        as_attachment=True,
        download_name=filename,
        mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )


from flask import request, jsonify
import json
import re


@app.route('/admin/block/<int:block_id>/upload_questions', methods=['POST'])
@login_required
def upload_questions(block_id):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    1. –¢–µ—Å—Ç—ã:
       "1. –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞" –∑–∞—Ç–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:
       "1. –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞" –∑–∞—Ç–µ–º –ø–∞—Ä—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–í–∞—Ä–∏–∞–Ω—Ç 1 | –û—Ç–≤–µ—Ç 1"
    """
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    block = Block.query.get_or_404(block_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ
    if 'questions_file' not in request.files:
        return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ'})

    file = request.files['questions_file']
    if file.filename == '':
        return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    try:
        content = file.read().decode('utf-8')
    except UnicodeDecodeError:
        try:
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            file.seek(0)
            content = file.read().decode('windows-1251')
        except:
            return jsonify({'success': False,
                            'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è UTF-8 –∏ Windows-1251)'})

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    block_type = request.form.get('block_type')
    if not block_type:
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–ª–æ–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if '|' in content:
            block_type = 'matching'
        else:
            block_type = 'test'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫–∞
    questions_created = 0
    try:
        if block_type == 'test':
            questions_created = parse_test_questions(content, block_id)
        elif block_type == 'matching':
            questions_created = parse_matching_questions(content, block_id)
        else:
            return jsonify({'success': False, 'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞: {block_type}'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}'})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –±–∞–ª–ª—ã –∑–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–æ–∫–µ
    update_question_points(block_id)

    return jsonify({
        'success': True,
        'message': f'–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {questions_created} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫',
        'questions_count': questions_created
    })


def parse_test_questions(content, block_id):
    """–†–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    lines = content.splitlines()

    questions = []
    current_question = None
    current_options = []
    current_correct = []

    for line in lines:
        line = line.rstrip()
        if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

        # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏
        if re.match(r'^\d+\.', line):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if current_question:
                questions.append({
                    'text': current_question,
                    'options': current_options,
                    'correct_answers': current_correct
                })

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            current_question = line.split('.', 1)[1].strip()
            current_options = []
            current_correct = []
        elif line.startswith('    '):  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (4 –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ)
            option = line.strip()
            if option not in current_options:
                current_options.append(option)
            current_correct.append(option)
        else:  # –û–±—ã—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            option = line.strip()
            if option and option not in current_options:
                current_options.append(option)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if current_question:
        questions.append({
            'text': current_question,
            'options': current_options,
            'correct_answers': current_correct
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    questions_created = 0
    for q_data in questions:
        if not q_data['options'] or not q_data['correct_answers']:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        question = Question(
            block_id=block_id,
            question_type='test',
            text=q_data['text'],
            options=json.dumps(q_data['options']),
            correct_answers=json.dumps(q_data['correct_answers']),
            points=1.0  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        )
        db.session.add(question)
        questions_created += 1

    db.session.commit()
    return questions_created


def parse_matching_questions(content, block_id):
    """–†–∞–∑–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
    lines = content.splitlines()

    questions = []
    current_question = None
    current_matches = []

    for line in lines:
        line = line.rstrip()
        if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

        # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏
        if re.match(r'^\d+\.', line):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if current_question:
                questions.append({
                    'text': current_question,
                    'matches': current_matches
                })

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            current_question = line.split('.', 1)[1].strip()
            current_matches = []
        elif '|' in line:  # –°—Ç—Ä–æ–∫–∞ —Å –ø–∞—Ä–æ–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            parts = line.split('|', 1)
            if len(parts) == 2:
                left = parts[0].strip()
                right = parts[1].strip()
                if left and right:
                    current_matches.append({'left': left, 'right': right})

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if current_question:
        questions.append({
            'text': current_question,
            'matches': current_matches
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    questions_created = 0
    for q_data in questions:
        if not q_data['matches']:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

        question = Question(
            block_id=block_id,
            question_type='matching',
            text=q_data['text'],
            matches=json.dumps(q_data['matches']),
            points=1.0  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        )
        db.session.add(question)
        questions_created += 1

    db.session.commit()
    return questions_created


def update_question_points(block_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –∏—Ö —Å—É–º–º–∞ —Ä–∞–≤–Ω—è–ª–∞—Å—å max_points –±–ª–æ–∫–∞"""
    block = Block.query.get(block_id)
    questions = Question.query.filter_by(block_id=block_id).all()

    if not questions:
        return

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    points_per_question = block.max_points / len(questions)

    for question in questions:
        question.points = points_per_question

    db.session.commit()


QUESTION_FILE_FORMAT = """
–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1
–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 4 –ø—Ä–æ–±–µ–ª–æ–≤)
–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 4

2. –ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 2
–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3

–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:
1. –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
–õ–µ–≤–∞—è —á–∞—Å—Ç—å 1 | –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å 1
–õ–µ–≤–∞—è —á–∞—Å—Ç—å 2 | –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å 2
–õ–µ–≤–∞—è —á–∞—Å—Ç—å 3 | –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å 3

2. –ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
–ü–æ–Ω—è—Ç–∏–µ 1 | –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 1
–ü–æ–Ω—è—Ç–∏–µ 2 | –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 2
"""


@app.route('/admin/block/<int:block_id>/file_format', methods=['GET'])
@login_required
def get_question_file_format(block_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    return jsonify({
        'success': True,
        'format': QUESTION_FILE_FORMAT
    })


def _get_month_name(month_num):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    return months.get(month_num, '')


@app.route('/admin/block/<int:block_id>/get_question', methods=['GET'])
@login_required
def get_question(block_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏'}), 403

    question_id = request.args.get('question_id')
    if not question_id:
        return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω ID –≤–æ–ø—Ä–æ—Å–∞'}), 400

    question = Question.query.get_or_404(int(question_id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É
    if question.block_id != block_id:
        return jsonify({'success': False, 'message': '–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É'}), 403

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    question_data = {
        'id': question.id,
        'text': question.text,
        'question_type': question.question_type,
        'points': question.points
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã–µ
    if question.question_type == 'test':
        question_data['options'] = question.options
        question_data['correct_answers'] = question.correct_answers

        # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ JavaScript
        try:
            question_data['options_list'] = json.loads(question.options) if question.options else []
            question_data['correct_answers_list'] = json.loads(
                question.correct_answers) if question.correct_answers else []
        except json.JSONDecodeError:
            question_data['options_list'] = []
            question_data['correct_answers_list'] = []

    elif question.question_type == 'matching':
        question_data['matches'] = question.matches

        # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ JavaScript
        try:
            question_data['matches_list'] = json.loads(question.matches) if question.matches else []
        except json.JSONDecodeError:
            question_data['matches_list'] = []

    return jsonify({
        'success': True,
        'question': question_data
    })


@app.route('/admin/block/<int:block_id>/update_question', methods=['POST'])
@login_required
def update_question(block_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏'}), 403

    question_id = request.form.get('question_id')
    if not question_id:
        return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω ID –≤–æ–ø—Ä–æ—Å–∞'}), 400

    question = Question.query.get_or_404(int(question_id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É
    if question.block_id != block_id:
        return jsonify({'success': False, 'message': '–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É'}), 403

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
    question.text = request.form.get('text', question.text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—è
    if question.question_type == 'test':
        options = request.form.getlist('options[]')
        correct_answers = request.form.getlist('correct_answers[]')

        if not options:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞'}), 400

        if len(options) < 2:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞'}), 400

        if not correct_answers:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'}), 400

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for answer in correct_answers:
            if answer not in options:
                return jsonify({'success': False, 'message': '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'}), 400

        question.options = json.dumps(options)
        question.correct_answers = json.dumps(correct_answers)

    elif question.question_type == 'matching':
        left_items = request.form.getlist('left_items[]')
        right_items = request.form.getlist('right_items[]')

        if not left_items or not right_items:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –ø–∞—Ä—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'}), 400

        if len(left_items) != len(right_items):
            return jsonify(
                {'success': False, 'message': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å'}), 400

        if len(left_items) < 2:
            return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –ø–∞—Ä—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'}), 400

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
        matches = []
        for i in range(len(left_items)):
            matches.append({
                'left': left_items[i],
                'right': right_items[i]
            })

        question.matches = json.dumps(matches)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try:
        db.session.commit()
        return jsonify({'success': True, 'message': '–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}'}), 500


@app.route('/admin/block/<int:block_id>/delete_question', methods=['POST'])
@login_required
def delete_question(block_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏'}), 403

    data = request.get_json()
    if not data or 'question_id' not in data:
        return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω ID –≤–æ–ø—Ä–æ—Å–∞'}), 400

    question_id = data['question_id']
    question = Question.query.get_or_404(int(question_id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É
    if question.block_id != block_id:
        return jsonify({'success': False, 'message': '–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É'}), 403

    # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    try:
        db.session.delete(question)
        db.session.commit()

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ
        recalculate_points_for_block(block_id)

        return jsonify({'success': True, 'message': '–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}'}), 500


def recalculate_points_for_block(block_id):
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ,
    —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –±–ª–æ–∫–∞.
    """
    block = Block.query.get_or_404(block_id)
    questions = Question.query.filter_by(block_id=block_id).all()

    if not questions:
        return

    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–ª–ª—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    points_per_question = block.max_points / len(questions)

    for question in questions:
        question.points = points_per_question

    db.session.commit()


@app.route('/admin/olympiad/<int:olympiad_id>/export_excel', methods=['GET'])
@login_required
def export_rankings_excel(olympiad_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –°–æ–∑–¥–∞–µ–º workbook
    wb = Workbook()
    ws = wb.active
    ws.title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    headers = ['–ú–µ—Å—Ç–æ', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è',
               '–í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å', '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', '–í—Ä–µ–º—è (–º–∏–Ω)', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ù–∞—á–∞–ª–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ']
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col, value=header)
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color="820000", end_color="820000", fill_type="solid")
        cell.alignment = Alignment(horizontal="center")

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    olympiad_duration = (olympiad.end_time - olympiad.start_time).total_seconds()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    for row, participation in enumerate(participations, 2):
        user = User.query.get(participation.user_id)
        speciality_info = user.get_speciality_info()
        speciality_name = speciality_info['name'] if speciality_info else '-'

        duration = None
        speed_category = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if participation.duration_seconds:
            duration = participation.duration_seconds / 60
            time_percentage = (participation.duration_seconds / olympiad_duration) * 100

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
            if time_percentage <= 25:
                speed_category = '‚ö° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ'
            elif time_percentage <= 50:
                speed_category = 'üöÄ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 75:
                speed_category = '‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 100:
                speed_category = '‚úÖ –í —Å—Ä–æ–∫'
            else:
                speed_category = '‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏'

        time_bonus = participation.time_bonus if participation.time_bonus else 0

        data = [
            row - 1,  # –ú–µ—Å—Ç–æ
            user.full_name,
            user.study_group or '-',
            speciality_name,
            f"{participation.total_points:.2f}",  # –ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è
            f"+{time_bonus:.2f}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å
            f"{participation.final_score:.2f}",  # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
            f"{duration:.1f}" if duration else '-',
            speed_category,
            participation.start_time.strftime('%d.%m.%Y %H:%M') if participation.start_time else '-',
            participation.finish_time.strftime('%d.%m.%Y %H:%M') if participation.finish_time else '-'
        ]

        for col, value in enumerate(data, 1):
            cell = ws.cell(row=row, column=col, value=value)
            cell.alignment = Alignment(horizontal="center")

    # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    for column in ws.columns:
        max_length = 0
        column_letter = column[0].column_letter
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)
        ws.column_dimensions[column_letter].width = adjusted_width

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç
    info_ws = wb.create_sheet("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ")
    info_data = [
        ['–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã', olympiad.title],
        ['–û–ø–∏—Å–∞–Ω–∏–µ', olympiad.description],
        ['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', olympiad.start_time.strftime('%d.%m.%Y %H:%M')],
        ['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', olympiad.end_time.strftime('%d.%m.%Y %H:%M')],
        ['–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', len(participations)],
        ['–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', datetime.now().strftime('%d.%m.%Y %H:%M')],
        ['–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤', '–î–∞'],
        ['', ''],
        ['–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:', ''],
        ['‚â§25% –≤—Ä–µ–º–µ–Ω–∏', '+20% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤'],
        ['25-50% –≤—Ä–µ–º–µ–Ω–∏', '+10% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤'],
        ['50-75% –≤—Ä–µ–º–µ–Ω–∏', '+5% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤'],
        ['75-100% –≤—Ä–µ–º–µ–Ω–∏', '+1% –æ—Ç –±–∞–∑–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤'],
        ['>100% –≤—Ä–µ–º–µ–Ω–∏', '–ù–µ—Ç –±–æ–Ω—É—Å–∞'],
    ]

    for row, (key, value) in enumerate(info_data, 1):
        info_ws.cell(row=row, column=1, value=key).font = Font(bold=True)
        info_ws.cell(row=row, column=2, value=value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    output = BytesIO()
    wb.save(output)
    output.seek(0)

    filename = f'results_with_time_{olympiad.title}_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx'

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


@app.route('/admin/olympiad/<int:olympiad_id>/export_csv', methods=['GET'])
@login_required
def export_rankings_csv(olympiad_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    writer = csv.writer(output, delimiter=';')

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    writer.writerow(['–ú–µ—Å—Ç–æ', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è',
                     '–í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å', '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', '–í—Ä–µ–º—è (–º–∏–Ω)', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ù–∞—á–∞–ª–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'])

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ª–∏–º–ø–∏–∞–¥—ã
    olympiad_duration = (olympiad.end_time - olympiad.start_time).total_seconds()

    # –î–∞–Ω–Ω—ã–µ
    for i, participation in enumerate(participations, 1):
        user = User.query.get(participation.user_id)
        speciality_info = user.get_speciality_info()
        speciality_name = speciality_info['name'] if speciality_info else '-'

        duration = None
        speed_category = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if participation.duration_seconds:
            duration = participation.duration_seconds / 60
            time_percentage = (participation.duration_seconds / olympiad_duration) * 100

            if time_percentage <= 25:
                speed_category = '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ'
            elif time_percentage <= 50:
                speed_category = '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 75:
                speed_category = '–ë—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 100:
                speed_category = '–í —Å—Ä–æ–∫'
            else:
                speed_category = '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏'

        time_bonus = participation.time_bonus if participation.time_bonus else 0

        writer.writerow([
            i,
            user.full_name,
            user.study_group or '-',
            speciality_name,
            f"{participation.total_points:.2f}",
            f"+{time_bonus:.2f}",
            f"{participation.final_score:.2f}",
            f"{duration:.1f}" if duration else '-',
            speed_category,
            participation.start_time.strftime('%d.%m.%Y %H:%M') if participation.start_time else '-',
            participation.finish_time.strftime('%d.%m.%Y %H:%M') if participation.finish_time else '-'
        ])

    output.seek(0)
    filename = f'results_with_time_{olympiad.title}_{datetime.now().strftime("%Y%m%d_%H%M")}.csv'

    return send_file(
        io.BytesIO(output.getvalue().encode('utf-8-sig')),
        as_attachment=True,
        download_name=filename,
        mimetype='text/csv'
    )


@app.route('/admin/olympiad/<int:olympiad_id>/export_detailed', methods=['GET'])
@login_required
def export_detailed_results(olympiad_id):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –±–ª–æ–∫–∞–º"""
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã
    blocks = Block.query.filter_by(olympiad_id=olympiad_id).order_by(Block.order).all()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –°–æ–∑–¥–∞–µ–º workbook —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    wb = Workbook()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    ws = wb.active
    ws.title = "–°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['–ú–µ—Å—Ç–æ', '–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è', '–í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å', '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª']
    for block in blocks:
        headers.append(f'–ë–ª–æ–∫ {block.order}: {block.title}')
    headers.extend(['–í—Ä–µ–º—è (–º–∏–Ω)', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ù–∞—á–∞–ª–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'])

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col, value=header)
        cell.font = Font(bold=True, color="FFFFFF")
        cell.fill = PatternFill(start_color="820000", end_color="820000", fill_type="solid")
        cell.alignment = Alignment(horizontal="center")

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–ª–∏–º–ø–∏–∞–¥—ã
    olympiad_duration = (olympiad.end_time - olympiad.start_time).total_seconds()

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    for row, participation in enumerate(participations, 2):
        user = User.query.get(participation.user_id)
        speciality_info = user.get_speciality_info()
        speciality_name = speciality_info['name'] if speciality_info else '-'

        duration = None
        speed_category = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if participation.duration_seconds:
            duration = participation.duration_seconds / 60
            time_percentage = (participation.duration_seconds / olympiad_duration) * 100

            if time_percentage <= 25:
                speed_category = '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ'
            elif time_percentage <= 50:
                speed_category = '–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 75:
                speed_category = '–ë—ã—Å—Ç—Ä–æ'
            elif time_percentage <= 100:
                speed_category = '–í —Å—Ä–æ–∫'
            else:
                speed_category = '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏'

        time_bonus = participation.time_bonus if participation.time_bonus else 0

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = [
            row - 1,  # –ú–µ—Å—Ç–æ
            user.full_name,
            user.study_group or '-',
            speciality_name,
            f"{participation.total_points:.2f}",  # –ë–∞–ª–ª—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è
            f"+{time_bonus:.2f}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –±–æ–Ω—É—Å
            f"{participation.final_score:.2f}"  # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        ]

        # –ë–∞–ª–ª—ã –ø–æ –±–ª–æ–∫–∞–º
        for block in blocks:
            block_result = BlockResult.query.filter_by(
                participation_id=participation.id,
                block_id=block.id
            ).first()

            if block_result:
                data.append(f"{block_result.points_earned:.1f}")
            else:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ BlockResult
                questions = Question.query.filter_by(block_id=block.id).all()
                answers = Answer.query.filter(
                    Answer.participation_id == participation.id,
                    Answer.question_id.in_([q.id for q in questions])
                ).all()

                if answers:
                    total_points = sum(answer.points_earned for answer in answers)
                    data.append(f"{total_points:.1f}")
                else:
                    data.append("0.0")

        # –í—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å
        data.extend([
            f"{duration:.1f}" if duration else '-',
            speed_category,
            participation.start_time.strftime('%d.%m.%Y %H:%M') if participation.start_time else '-',
            participation.finish_time.strftime('%d.%m.%Y %H:%M') if participation.finish_time else '-'
        ])

        for col, value in enumerate(data, 1):
            cell = ws.cell(row=row, column=col, value=value)
            cell.alignment = Alignment(horizontal="center")

    # –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã
    for column in ws.columns:
        max_length = 0
        column_letter = column[0].column_letter
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)
        ws.column_dimensions[column_letter].width = adjusted_width

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–ª–æ–∫–∞–º
    stats_ws = wb.create_sheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_headers = ['–ë–ª–æ–∫', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', '–ú–∞–∫—Å–∏–º—É–º', '–ú–∏–Ω–∏–º—É–º', '–ü—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è']
    for col, header in enumerate(stats_headers, 1):
        cell = stats_ws.cell(row=1, column=col, value=header)
        cell.font = Font(bold=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É
    for row, block in enumerate(blocks, 2):
        block_results = BlockResult.query.filter_by(block_id=block.id).all()

        if block_results:
            points = [br.points_earned for br in block_results]
            avg_points = sum(points) / len(points)
            max_points = max(points)
            min_points = min(points)

            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥
            threshold_points = block.max_points * (block.threshold_percentage / 100)
            passed_threshold = len([p for p in points if p >= threshold_points])
            pass_percentage = (passed_threshold / len(points)) * 100
        else:
            avg_points = max_points = min_points = 0
            passed_threshold = 0
            pass_percentage = 0

        stats_data = [
            f'–ë–ª–æ–∫ {block.order}: {block.title}',
            f"{avg_points:.1f}",
            f"{max_points:.1f}",
            f"{min_points:.1f}",
            f"{passed_threshold}/{len(block_results) if block_results else 0}",
            f"{pass_percentage:.1f}%"
        ]

        for col, value in enumerate(stats_data, 1):
            stats_ws.cell(row=row, column=col, value=value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    output = BytesIO()
    wb.save(output)
    output.seek(0)

    filename = f'detailed_results_with_time_{olympiad.title}_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx'

    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


def get_month_name(month_num):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    months = {
        1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
    }
    return months.get(month_num, '–º–µ—Å—è—Ü–∞')


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/users/<int:user_id>/toggle_admin', methods=['POST'])
@login_required
def toggle_user_admin(user_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    user = User.query.get_or_404(user_id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user.id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'})

    user.is_admin = not user.is_admin
    db.session.commit()

    status = '–¥–æ–±–∞–≤–ª–µ–Ω—ã' if user.is_admin else '–æ—Ç–æ–∑–≤–∞–Ω—ã'
    return jsonify({'success': True, 'message': f'–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {status}'})


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])
@login_required
def delete_user(user_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    user = User.query.get_or_404(user_id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user.id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'})

    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö
    Participation.query.filter_by(user_id=user.id).delete()

    db.session.delete(user)
    db.session.commit()

    return jsonify({'success': True, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})


@app.route('/admin/olympiad/create', methods=['POST'])
@login_required
def create_olympiad():
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    title = request.form.get('title')
    description = request.form.get('description')

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ
    start_time = datetime.strptime(request.form.get('start_time'), '%Y-%m-%dT%H:%M')
    end_time = datetime.strptime(request.form.get('end_time'), '%Y-%m-%dT%H:%M')

    pdf_file = request.files.get('welcome_pdf')
    welcome_pdf = None

    if pdf_file and pdf_file.filename:
        filename = secure_filename(f"{uuid.uuid4()}_{pdf_file.filename}")
        pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        pdf_file.save(pdf_path)
        welcome_pdf = filename

    olympiad = Olympiad(
        title=title,
        description=description,
        start_time=start_time,
        end_time=end_time,
        welcome_pdf=welcome_pdf,
        created_by=current_user.id
    )

    db.session.add(olympiad)
    db.session.commit()

    return jsonify({'success': True, 'olympiad_id': olympiad.id})


@app.route('/admin/olympiad/<int:olympiad_id>', methods=['GET'])
@login_required
def edit_olympiad(olympiad_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)
    blocks = Block.query.filter_by(olympiad_id=olympiad_id).order_by(Block.order).all()

    return render_template('admin/edit_olympiad.html', olympiad=olympiad, blocks=blocks)


@app.route('/admin/olympiad/<int:olympiad_id>/update', methods=['POST'])
@login_required
def update_olympiad(olympiad_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    olympiad.title = request.form.get('title')
    olympiad.description = request.form.get('description')

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ
    olympiad.start_time = datetime.strptime(request.form.get('start_time'), '%Y-%m-%dT%H:%M')
    olympiad.end_time = datetime.strptime(request.form.get('end_time'), '%Y-%m-%dT%H:%M')

    pdf_file = request.files.get('welcome_pdf')
    if pdf_file and pdf_file.filename:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if olympiad.welcome_pdf:
            old_path = os.path.join(app.config['UPLOAD_FOLDER'], olympiad.welcome_pdf)
            if os.path.exists(old_path):
                os.remove(old_path)

        filename = secure_filename(f"{uuid.uuid4()}_{pdf_file.filename}")
        pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        pdf_file.save(pdf_path)
        olympiad.welcome_pdf = filename

    db.session.commit()

    return jsonify({'success': True})


@app.route('/admin/olympiad/<int:olympiad_id>/add_block', methods=['POST'])
@login_required
def add_block(olympiad_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π order –¥–ª—è –±–ª–æ–∫–æ–≤ –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ
    max_order = db.session.query(db.func.max(Block.order)).filter(Block.olympiad_id == olympiad_id).scalar() or 0

    title = request.form.get('title')
    description = request.form.get('description')
    max_points = float(request.form.get('max_points'))
    threshold_percentage = float(request.form.get('threshold_percentage'))

    block = Block(
        olympiad_id=olympiad_id,
        title=title,
        description=description,
        max_points=max_points,
        threshold_percentage=threshold_percentage,
        order=max_order + 1
    )

    db.session.add(block)
    db.session.commit()

    return jsonify({'success': True, 'block_id': block.id})


@app.route('/admin/block/<int:block_id>/edit', methods=['GET'])
@login_required
def edit_block(block_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    block = Block.query.get_or_404(block_id)
    questions = Question.query.filter_by(block_id=block_id).all()

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = prepare_question_data(questions)

    return render_template('admin/edit_block.html', block=block, questions=questions)


@app.route('/admin/block/<int:block_id>/add_question', methods=['POST'])
@login_required
def add_question(block_id):
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    block = Block.query.get_or_404(block_id)

    question_type = request.form.get('question_type')
    text = request.form.get('text')

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
    questions_count = Question.query.filter_by(block_id=block_id).count() + 1
    points_per_question = block.max_points / questions_count

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    for q in Question.query.filter_by(block_id=block_id).all():
        q.points = points_per_question

    if question_type == 'test':
        options = request.form.getlist('options[]')
        correct_answers = request.form.getlist('correct_answers[]')

        question = Question(
            block_id=block_id,
            question_type=question_type,
            text=text,
            options=json.dumps(options),
            correct_answers=json.dumps(correct_answers),
            points=points_per_question
        )
    elif question_type == 'matching':
        left_items = request.form.getlist('left_items[]')
        right_items = request.form.getlist('right_items[]')
        matches = []

        for i in range(len(left_items)):
            matches.append({
                'left': left_items[i],
                'right': right_items[i]
            })

        question = Question(
            block_id=block_id,
            question_type=question_type,
            text=text,
            matches=json.dumps(matches),
            points=points_per_question
        )

    db.session.add(question)
    db.session.commit()

    return jsonify({'success': True, 'question_id': question.id})


@app.route('/olympiad/<int:olympiad_id>/view', methods=['GET'])
@login_required
def view_olympiad(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    current_time = get_current_time()
    if not current_user.is_admin and olympiad.end_time < current_time:
        flash('–û–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
        return redirect(url_for('index'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id
    ).first()

    return render_template('olympiad/view.html', olympiad=olympiad, participation=participation)


@app.route('/olympiad/<int:olympiad_id>/register', methods=['POST'])
@login_required
def register_olympiad(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    existing = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id
    ).first()

    if existing:
        return jsonify({'success': False, 'message': '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É'})

    participation = Participation(
        user_id=current_user.id,
        olympiad_id=olympiad_id,
        status='registered'
    )

    db.session.add(participation)
    db.session.commit()

    return jsonify({'success': True})


@app.route('/olympiad/<int:olympiad_id>/start', methods=['POST'])
@login_required
def start_olympiad(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞—Ç–∞ –ª–∏ —É–∂–µ –æ–ª–∏–º–ø–∏–∞–¥–∞
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id
    ).first()

    if not participation:
        return jsonify({'success': False, 'message': '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É'})

    if participation.status == 'in_progress':
        return jsonify({'success': True, 'redirect': url_for('take_olympiad', olympiad_id=olympiad_id)})

    if participation.status == 'completed':
        return jsonify({'success': False, 'message': '–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É'})

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    current_time = get_current_time()
    if current_time < olympiad.start_time:
        return jsonify({
            'success': False,
            'message': f'–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è {olympiad.start_time.strftime("%d.%m.%Y –≤ %H:%M")}'
        })

    if current_time > olympiad.end_time:
        return jsonify({'success': False, 'message': '–í—Ä–µ–º—è –æ–ª–∏–º–ø–∏–∞–¥—ã –∏—Å—Ç–µ–∫–ª–æ'})

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
    first_block = Block.query.filter_by(olympiad_id=olympiad_id, order=1).first()
    if not first_block:
        return jsonify({'success': False, 'message': '–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–æ–≤'})

    participation.status = 'in_progress'
    participation.start_time = current_time
    participation.current_block = first_block.id

    db.session.commit()

    return jsonify({'success': True, 'redirect': url_for('take_olympiad', olympiad_id=olympiad_id)})


@app.route('/olympiad/<int:olympiad_id>/take', methods=['GET'])
@login_required
def take_olympiad(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id,
        status='in_progress'
    ).first()

    if not participation:
        flash('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
        return redirect(url_for('view_olympiad', olympiad_id=olympiad_id))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    current_block = Block.query.get(participation.current_block)
    if not current_block:
        flash('–û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('view_olympiad', olympiad_id=olympiad_id))

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    questions = Question.query.filter_by(block_id=current_block.id).all()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    questions = prepare_question_data(questions)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    user_answers = {}
    for question in questions:
        answer = Answer.query.filter_by(
            participation_id=participation.id,
            question_id=question.id
        ).first()
        if answer:
            try:
                user_answers[question.id] = json.loads(answer.answer_data)
            except:
                user_answers[question.id] = []

    return render_template(
        'olympiad/take.html',
        olympiad=olympiad,
        block=current_block,
        questions=questions,
        user_answers=user_answers,
        participation=participation
    )


@app.route('/olympiad/<int:olympiad_id>/submit_answer', methods=['POST'])
@login_required
def submit_answer(olympiad_id):
    data = request.get_json()
    question_id = data.get('question_id')
    answer_data = data.get('answer_data')

    question = Question.query.get_or_404(question_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id,
        status='in_progress'
    ).first()

    if not participation:
        return jsonify({'success': False, 'message': '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ'}), 403

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É
    if question.block_id != participation.current_block:
        return jsonify({'success': False, 'message': '–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É'}), 403

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = False
    points_earned = 0

    if question.question_type == 'test':
        correct_answers = set(json.loads(question.correct_answers))
        user_answers = set(answer_data)

        if correct_answers == user_answers:
            is_correct = True
            points_earned = question.points

    elif question.question_type == 'matching':
        matches = json.loads(question.matches)
        correct_matches = {match['left']: match['right'] for match in matches}

        user_correct_count = 0
        for pair in answer_data:
            if pair['left'] in correct_matches and correct_matches[pair['left']] == pair['right']:
                user_correct_count += 1

        # –ï—Å–ª–∏ –≤—Å–µ –ø–∞—Ä—ã —Å–æ–≤–ø–∞–ª–∏
        if user_correct_count == len(matches):
            is_correct = True
            points_earned = question.points
        else:
            # –ß–∞—Å—Ç–∏—á–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            points_earned = (user_correct_count / len(matches)) * question.points

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
    existing_answer = Answer.query.filter_by(
        participation_id=participation.id,
        question_id=question_id
    ).first()

    if existing_answer:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        existing_answer.answer_data = json.dumps(answer_data)
        existing_answer.is_correct = is_correct
        existing_answer.points_earned = points_earned
        existing_answer.answered_at = get_current_time()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        answer = Answer(
            participation_id=participation.id,
            question_id=question_id,
            answer_data=json.dumps(answer_data),
            is_correct=is_correct,
            points_earned=points_earned
        )
        db.session.add(answer)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if existing_answer:
        participation.total_points = participation.total_points - existing_answer.points_earned + points_earned
    else:
        participation.total_points += points_earned

    db.session.commit()

    return jsonify({'success': True, 'points': points_earned})


@app.route('/olympiad/<int:olympiad_id>/ranking', methods=['GET'])
@login_required
def get_ranking(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id
    ).first()

    if not participation:
        return jsonify({'success': False, 'message': '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ'})

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    current_block = Block.query.get(participation.current_block)
    if not current_block:
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'})

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    prev_block = None
    if current_block.order > 1:
        prev_block = Block.query.filter_by(
            olympiad_id=olympiad_id,
            order=current_block.order - 1
        ).first()
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫, —Ç–æ –±–µ—Ä–µ–º –µ–≥–æ –∂–µ
        prev_block = current_block

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–æ–∫–∞
    block_result = BlockResult.query.filter_by(
        participation_id=participation.id,
        block_id=prev_block.id
    ).first()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
    block_points = 0
    block_max_points = prev_block.max_points

    if block_result:
        block_points = block_result.points_earned
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–ª–æ–∫–∞, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
        questions = Question.query.filter_by(block_id=prev_block.id).all()
        answers = Answer.query.filter(
            Answer.participation_id == participation.id,
            Answer.question_id.in_([q.id for q in questions])
        ).all()

        if answers:
            block_points = sum(answer.points_earned for answer in answers)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∏–π
    completed_participations = Participation.query.filter(
        Participation.olympiad_id == olympiad_id,
        Participation.status == 'completed'
    ).order_by(Participation.final_score.desc()).all()

    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ª–∏–º–ø–∏–∞–¥—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –¥–ª—è –Ω–µ–≥–æ
    if participation.status != 'completed' and participation not in completed_participations:
        completed_participations.append(participation)
        # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ - –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º total_points
        completed_participations.sort(key=lambda p: p.final_score if p.status == 'completed' else p.total_points,
                                      reverse=True)

    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rank = 0
    prev_points = None
    skip_ranks = 0

    for i, p in enumerate(completed_participations):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_points = p.final_score if p.status == 'completed' else p.total_points

        # –ï—Å–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –æ–Ω–∏ –¥–µ–ª—è—Ç –º–µ—Å—Ç–æ
        if prev_points is not None and current_points == prev_points:
            skip_ranks += 1
        else:
            skip_ranks = 0

        prev_points = current_points

        if p.id == participation.id:
            user_rank = i + 1 - skip_ranks
            break

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –±–∞–ª–ª–∞–º–∏
    all_participations = Participation.query.filter_by(olympiad_id=olympiad_id).all()
    participations_with_points = [p for p in all_participations if p.total_points > 0]

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    rank_percentage = 0
    if len(participations_with_points) > 0:
        rank_percentage = 100 - ((user_rank - 1) / len(participations_with_points) * 100)

    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ 0, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if prev_block.order == 1:
        user_rank = 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 (—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    total_participants = max(1, len(all_participations))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∏–π, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π
    display_points = participation.final_score if participation.status == 'completed' else participation.total_points

    response_data = {
        'success': True,
        'rank_position': user_rank,
        'rank_percentage': round(rank_percentage, 1),
        'block_points': round(block_points, 1),
        'block_max_points': round(block_max_points, 1),
        'total_points': round(display_points, 1),
        'total_participants': total_participants
    }

    return jsonify(response_data)


@app.route('/olympiad/<int:olympiad_id>/submit_block', methods=['POST'])
@login_required
def submit_block(olympiad_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id,
        status='in_progress'
    ).first()

    if not participation:
        return jsonify({'success': False, 'message': '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ'}), 403

    current_block = Block.query.get(participation.current_block)
    if not current_block:
        return jsonify({'success': False, 'message': '–¢–µ–∫—É—â–∏–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–ª–æ–∫–∞
    questions = Question.query.filter_by(block_id=current_block.id).all()
    answered_questions = Answer.query.filter(
        Answer.participation_id == participation.id,
        Answer.question_id.in_([q.id for q in questions])
    ).count()

    if answered_questions < len(questions):
        return jsonify({
            'success': False,
            'message': f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ {answered_questions} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤'
        })

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –±–∞–ª–ª—ã
    total_points_possible = sum(q.points for q in questions)

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
    block_answers = Answer.query.filter(
        Answer.participation_id == participation.id,
        Answer.question_id.in_([q.id for q in questions])
    ).all()

    user_points = sum(answer.points_earned for answer in block_answers)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–ª—ã –∑–∞ –±–ª–æ–∫
    block_result = BlockResult.query.filter_by(
        participation_id=participation.id,
        block_id=current_block.id
    ).first()

    if not block_result:
        block_result = BlockResult(
            participation_id=participation.id,
            block_id=current_block.id,
            points_earned=user_points,
            completed_at=get_current_time()
        )
        db.session.add(block_result)
    else:
        block_result.points_earned = user_points
        block_result.completed_at = get_current_time()

    percentage_correct = (user_points / total_points_possible) * 100 if total_points_possible > 0 else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
    if percentage_correct < current_block.threshold_percentage:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É
        participation.status = 'completed'
        participation.finish_time = get_current_time()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        calculate_final_score(participation)

        db.session.commit()

        return jsonify({
            'success': True,
            'completed': True,
            'message': f'–í—ã –Ω–∞–±—Ä–∞–ª–∏ {percentage_correct:.1f}%, —á—Ç–æ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {current_block.threshold_percentage}%. –û–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
            'redirect': url_for('olympiad_results', olympiad_id=olympiad_id),
            'block_data': {
                'block_id': current_block.id,
                'points_earned': user_points,
                'total_points_possible': total_points_possible
            }
        })

    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    next_block = Block.query.filter_by(
        olympiad_id=olympiad_id,
        order=current_block.order + 1
    ).first()

    if not next_block:
        # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É
        participation.status = 'completed'
        participation.finish_time = get_current_time()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        calculate_final_score(participation)

        db.session.commit()

        return jsonify({
            'success': True,
            'completed': True,
            'message': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –±–ª–æ–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã.',
            'redirect': url_for('olympiad_results', olympiad_id=olympiad_id),
            'block_data': {
                'block_id': current_block.id,
                'points_earned': user_points,
                'total_points_possible': total_points_possible
            }
        })

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
    participation.current_block = next_block.id

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    db.session.commit()

    return jsonify({
        'success': True,
        'completed': False,
        'message': f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–ª–æ–∫ –∏ –Ω–∞–±—Ä–∞–ª–∏ {percentage_correct:.1f}%. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É.',
        'redirect': url_for('take_olympiad', olympiad_id=olympiad_id),
        'block_data': {
            'block_id': current_block.id,
            'points_earned': user_points,
            'total_points_possible': total_points_possible
        }
    })


@app.route('/olympiad/<int:olympiad_id>/results', methods=['GET'])
@login_required
def olympiad_results(olympiad_id):
    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    participation = Participation.query.filter_by(
        user_id=current_user.id,
        olympiad_id=olympiad_id
    ).first()

    if not participation or participation.status != 'completed':
        flash('–í—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É', 'error')
        return redirect(url_for('view_olympiad', olympiad_id=olympiad_id))

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞
    rankings = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    user_rank = None
    for i, p in enumerate(rankings, 1):
        if p.id == participation.id:
            user_rank = i
            break

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
    blocks = Block.query.filter_by(olympiad_id=olympiad_id).order_by(Block.order).all()
    block_stats = []

    for block in blocks:
        questions = Question.query.filter_by(block_id=block.id).all()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
        answers = Answer.query.filter(
            Answer.participation_id == participation.id,
            Answer.question_id.in_([q.id for q in questions])
        ).all()

        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –±–ª–æ–∫, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –Ω–µ–≥–æ –Ω–µ –¥–æ—à–µ–ª
        if not answers:
            block_stats.append({
                'block': block,
                'attempted': False,
                'total_possible': sum(q.points for q in questions),
                'user_points': 0,
                'percentage': 0
            })
            continue

        total_possible = sum(q.points for q in questions)
        user_points = sum(a.points_earned for a in answers)
        percentage = (user_points / total_possible) * 100 if total_possible > 0 else 0

        block_stats.append({
            'block': block,
            'attempted': True,
            'total_possible': total_possible,
            'user_points': user_points,
            'percentage': percentage
        })

    return render_template(
        'olympiad/results.html',
        olympiad=olympiad,
        participation=participation,
        rankings=rankings,
        user_rank=user_rank,
        block_stats=block_stats,
        total_participants=len(rankings)
    )


@app.route('/admin/olympiad/<int:olympiad_id>/rankings', methods=['GET'])
@login_required
def admin_rankings(olympiad_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∏—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    user_ids = [p.user_id for p in participations]
    users = {u.id: u for u in User.query.filter(User.id.in_(user_ids)).all()}

    return render_template(
        'admin/rankings.html',
        olympiad=olympiad,
        participations=participations,
        users=users
    )


@app.route('/admin/olympiad/<int:olympiad_id>/export_pdf', methods=['GET'])
@login_required
def export_rankings_pdf(olympiad_id):
    if not current_user.is_admin:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'error')
        return redirect(url_for('index'))

    olympiad = Olympiad.query.get_or_404(olympiad_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    update_all_final_scores(olympiad_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∏—è, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É –±–∞–ª–ª—É
    participations = Participation.query.filter_by(
        olympiad_id=olympiad_id,
        status='completed'
    ).order_by(Participation.final_score.desc()).all()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    user_ids = [p.user_id for p in participations]
    users = {u.id: u for u in User.query.filter(User.id.in_(user_ids)).all()}

    # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è PDF
    html = render_template(
        'admin/rankings_pdf.html',
        olympiad=olympiad,
        participations=participations,
        users=users
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    pdf = pdfkit.from_string(html, False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ —Ñ–∞–π–ª
    buffer = BytesIO(pdf)
    buffer.seek(0)

    return send_file(
        buffer,
        as_attachment=True,
        download_name=f'rankings_{olympiad.title}_{datetime.now().strftime("%Y%m%d")}.pdf',
        mimetype='application/pdf'
    )


# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
@app.route('/admin/olympiad/<int:olympiad_id>/recalculate_scores', methods=['POST'])
@login_required
def recalculate_scores(olympiad_id):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –±–∞–ª–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403

    try:
        update_all_final_scores(olympiad_id)
        return jsonify({'success': True, 'message': '–ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ: {str(e)}'}), 500


if __name__ == '__main__':
    with app.app_context():
        db.create_all()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
            db.session.execute('SELECT final_score, duration_seconds, time_bonus FROM participation LIMIT 1')
        except:
            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            try:
                db.session.execute('ALTER TABLE participation ADD COLUMN final_score FLOAT DEFAULT 0')
                db.session.execute('ALTER TABLE participation ADD COLUMN duration_seconds FLOAT DEFAULT NULL')
                db.session.execute('ALTER TABLE participation ADD COLUMN time_bonus FLOAT DEFAULT 0')
                db.session.commit()
                print("–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
            except:
                print("–°—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        admin = User.query.filter_by(email='admin@example.com').first()
        if not admin:
            admin = User(
                email='admin@example.com',
                full_name='Administrator',
                is_admin=True
            )
            admin.set_password('admin')
            db.session.add(admin)
            db.session.commit()
            print("–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@example.com / admin")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∏–π
        try:
            completed_participations = Participation.query.filter_by(status='completed').all()
            for participation in completed_participations:
                if participation.final_score == 0:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
                    calculate_final_score(participation)
            db.session.commit()
            print(f"–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –¥–ª—è {len(completed_participations)} —É—á–∞—Å—Ç–∏–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–ª–ª–æ–≤: {e}")

    app.run(debug=True)